#lang racket
;平方
(define(square x)(* x x))

(define(sum-of-square x y)(+ (square x) (square y)))

(define (f a)
  (sum-of-square (+ a 1) (* a 2)))

;求绝对值
(define (abs x)
  (if (< x 0) (- x)
      x))

;>=
(define(>= x y)
  (or (> x y) (= x y)))

;平均值
(define(average guess x)
    (/ (+ guess x) 2))

;根据牛顿法求平方根(块结构)
(define(sqrt x)
  (define(good-enough? guess)
    (< (abs(- (square guess) x)) 0.001))
  (define(improve guess)
    (average guess (/ x guess)))
  (define(sqrt-item guess)
    (if(good-enough? guess)
       guess
       (sqrt-item (improve guess))))
  (sqrt-item 1.0))

;线性的递归和迭代
(define(factorial n)
  (if (= n 1)
      1
      (* n (factorial(- n 1)))))

(define(f2 n)
  (define(fact-item product counter)
    (if(> counter n)
       product
       (fact-item (* product counter) (+ counter 1))))
  (fact-item 1 1))

;树形递归斐波那契
(define(fib-tree n)
  (cond ((= n 0) 0)
        ((= n 1)1)
        (else(+ (fib(- n 1)) (fib(- n 2))))))

;迭代斐波那契
(define(fib n)
  (define(fib-item a b count)
    (if(= count 0)
       b
       (fib-item (+ a b) a (- count 1))))
  (fib-item 1 0 n))

;换零钱方式的种数
(define(count-change amount)
  (cc amount 5))
(define(cc amount kinds-of-coins)
  (cond ((= amount 0) 1)
        ((or (< amount 0) (= kinds-of-coins 0)) 0)
        (else(+ (cc amount (- kinds-of-coins 1))
                (cc (- amount (first-denomination kinds-of-coins)) kinds-of-coins)))))
(define (first-denomination kinds-of-coins)
  (cond ((= kinds-of-coins 1) 1)
        ((= kinds-of-coins 2) 5)
        ((= kinds-of-coins 3) 10)
        ((= kinds-of-coins 4) 25)
        ((= kinds-of-coins 5) 50)))

;求幂递归
(define(expt-d b n)
  (if (= n 0)
      1
      (* b (expt-d b (- n 1)))))

;求幂迭代
(define(expt b n)
  (define(expt-iter b counter product)
    (if (= counter 0)
        product
        (expt-iter b (- counter 1) (* b product)))) 
  (expt-iter b n 1))

;快速求幂
(define(fast-expt b n)
  (cond((= n 0) 1)
       ((even? n) (square (fast-expt b (/ n 2))))
       (else(* b (fast-expt b (- n 1))))))
;检测一个整数是否偶数
(define (even? n)
  (= (remainder n 2) 0))

;最大公约数
(define(gcd a b)
  (if(= b 0)
     a
     (gcd b (remainder a b))))

;寻找最小因子
(define (smallest-divisor n)
  (find-divisor n 2))

(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else(find-divisor n (+ test-divisor 1)))))
(define (divides? a b)
  (= (remainder b a) 0))

;检查是否是素数
(define (prime? n)
  (= n (smallest-divisor n)))

;费马小定理(概率正确)
(define (expmod base exp m)
  (cond((= exp 0) 1)
       ((even? exp)
        (remainder (square (expmod base (/ exp 2) m))
                   m))
       (else
        (remainder(* base (expmod base (- exp 1) m))
                  m))))
(define (fermat-test n)
  (define (try-it a)
    (= (expmod a n n) a))
  (try-it (+ 1 (random (- n 1)))))

(define (fast-prime? n times)
  (cond((= times 0) true)
       ((fermat-test n)(fast-prime? n (- times 1)))
       (else false)))

;立方
(define (cube x)(* x x x))

;高阶过程
(define (sum term a next b)
  (if (> a b)
      0
      (+ (term a)
         (sum term (next a) next b))))

(define (inc n)(+ n 1))

(define(sum-cubes a b)
  (sum cube a inc b))

(define (identity x) x)

(define(sum-integers a b)
  (sum identity a inc b))

(define (pi-sum a b)
  (define(pi-term x)
    (/ 1.0 (* x (+ x 2))))
  (define(pi-next x)
    (+ x 4))
  (sum pi-term a pi-next b))

(define(integral f a b dx)
  (define (add-dx x)(+ x dx))
  (* (sum f (+ a (/ dx 2.0)) add-dx b)
     dx))

;通过区间折半寻找方程f(x)的根
(define(search f neg-point pos-point)
  (let((midpoint (average neg-point pos-point)))
    (if(close-enough? neg-point pos-point)
       midpoint
       (let((test-value (f midpoint)))
         (cond((positive? test-value)
               (search f neg-point midpoint))
              ((negative? test-value)
               (search f midpoint pos-point))
              (else midpoint))))))

(define (close-enough? x y)
  (< (abs (- x y)) 0.001))

(define(half-interval-method f a b)
  (let ((a-value (f a))
        (b-value (f b)))
    (cond((and (negative? a-value) (positive? b-value))
          (search f a b))
         ((and (negative? b-value) (positive? a-value))
          (search f b a))
         (else
          (error "values are not of opposite sign" a b)))))

;不动点
(define tolerance 0.00001)
(define (fixed-point f first-guess)
  (define(close-enough? v1 v2)
    (< (abs (- v1 v2)) tolerance))
  (define(try guess)
    (let ((next (f guess)))
      (if(close-enough? guess next)
         next
         (try next))))
  (try first-guess))

(define (average-damp f)
  (lambda (x) (average x (f x))))

(define (cube-root x)
  (fixed-point (average-damp(lambda (y)(/ x (square y)))) 1.0))

;导数计算
(define (deriv g)
  (lambda(x)
    (/ (- (g (+ x dx)) (g x))
       dx)))
(define dx 0.00001)

(define(newton-transform g)
  (lambda(x)(- x (/ (g x) ((deriv g) x)))))

(define (newton-method g guess)
  (fixed-point (newton-transform g) guess))

;--------------------------------------------------------------------------------
(define (add-rat x y)
  (make-rat (+ (* (numer x) (denom y))
               (* (numer y) (denom x)))
            (* (denom x) (denom y))))
(define (sub-rat x y)
  (make-rat (- (* (numer x) (denom y))
               (* (denom x) (numer y)))
            (* (denom x) (denom y))))
(define (mul-rat x y)
  (make-rat(* (numer x) (numer y))
           (* (denom x) (denom y))))
(define (div-rat x y)
  (make-rat(* (numer x) (denom y))
           (* (denom x) (numer y))))
(define (equal-rat? x y)
  (= (* (numer x) (denom y))
     (* (numer y) (denom x))))


(define (make-rat n d)
  (let((g (gcd n d)))
    (cons (/ n g) (/ d g)))) 
(define (numer x)(car x))
(define (denom x)(cdr x))
(define(print-rat x)
  (newline)
  (display (numer x))
  (display "/")
  (display (denom x)))
;--------------------------------------------------------------------------------------
(define (list-ref items n)
  (if(= n 0)
     (car items)
     (list-ref (cdr items) (- n 1))))

(define (length items)
  (define (length-iter a count)
    (if (null? a)
        count
        (length-iter (cdr a) (+ 1 count))))
  (length-iter items 0))

(define (append list1 list2)
  (if (null? list1)
      list2
      (cons (car list1) (append (cdr list1) list2))))

(define nil '())

(define(scale-list items factor)
  (if(null? items)
     nil
     (cons (* (car items) factor)
           (scale-list (cdr items) factor))))

(define (map proc items)
  (if(null? items)
     nil
     (cons (proc (car items))
           (map proc (cdr items)))))

(map abs (list -1 2 -8 0 28 -6))
          
  
